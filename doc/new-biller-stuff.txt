
line count savings from removing confusing crap from net and encrypt1:

before:

    147 net.h
   2025 net.c
     69 encrypt.h
    324 encrypt1.c
   2565 total

after:

    133 net.h
   1840 net.c
     58 encrypt.h
    238 encrypt1.c
   2269 total

diff in net.c: -185
diff total   : -296

lines in bproxy:
     68 bproxy
    220 asss_bprot.py
    343 vie_bprot.py
     26 util.py
    657 total


=== update:
adding back client functionality to net:
 + 176 lines for net.c, 36 lines in net-client.h, which describes the
 new interface. + 56 lines in encrypy1.c and + 13 in encrypt.h to do
 client encryption.


how to handle disconnects, what are the problems?

the server needs to know when the biller disconnects. this is relatively
easy with tcp, it will just see the socket closed. the server will then
stop sending data to the biller and try to reestablish a connection. in
the meantime, the server will send a warning message to all connected
players, and allow logins with an initial ^.

when the server reestablishes a connection, it should send an
informative message. the biller will have no state information about any
of the players in the zone, so they will have to log out and log in
again to use any biller features.

the alternative is to have the server automatically re-log-in all
players. that has many issues, though: it means the server needs to keep
their password and contid around forever. and what happens if the biller
responds differently (because it switched databases)? should the server
kick the player? what about ^players? the server can attempt to log them
in when the biller is back, but how will it give them a new name?

it's too complicated, just force them to log in again after a disconnect
if they want biller features.



formal spec of protocol: see file 'new-biller-prot.txt'

